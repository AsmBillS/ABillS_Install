#OS CentOS 7_x64
#COMMENTS CentOS comments
#M update:upgrade:yum -y update
#M mysql:MySQL:_install_mysql
#M apache:apache:_install_httpd
#M perl_modules:Perl_modules:_install_perl_modules
#M freeradius:Freeradius_Server:_install_freeradius
#M DHCP:Dhcp_server:_install_dhcp
#M IPN:Flow-tools:install_flowtools
#M Ipcad:Ipcad:install_ipcad
#dM Mail:Mail_server:install_mail
# MRTG=
# IPN=
# fsbackup=
# perl_speedy 
#M utils:Utils:_install_utils

# Variable

WEB_SERVER_USER=apache
APACHE_CONF_DIR=/etc/httpd/conf.d
RESTART_MYSQL=/etc/init.d/mysqld
RESTART_RADIUS=/etc/init.d/radiusd
RESTART_APACHE=/etc/init.d/httpd
RESTART_DHCP=/etc/init.d/dhcpd
PING=/bin/ping

#*******************************************
#  Pre install
#*******************************************
pre_install() {
  yum -y install wget dialog tmux bash gcc;
  _install_epel;
}

#*********************************************************
#  Install MySQL
#*********************************************************
_install_mysql(){
  yum install -y mariadb mariadb-devel mariadb-libs mariadb-server
  systemctl start mariadb
  systemctl enable mariadb
}

#*********************************************************
#  Install apache
#*********************************************************
_install_httpd(){
  yum -y install httpd httpd-devel httpd-tools mod_perl
  chkconfig httpd on
  service httpd start
  
   echo "#########        Opening firewall ports         ############" 
  iptables -I INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT
  iptables -I INPUT -p tcp --dport 9443 -m state --state NEW -j ACCEPT
  service iptables save
 echo "#########        Disabling selinux               ############"
   sed 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config > config2
   cat config2 > /etc/selinux/config
   rm -f config2
   cat /etc/selinux/config | grep 'SELINUX='
}
#*********************************************************
#  Install EPEL repository CentOS (RedHat)
#*********************************************************
_install_epel() {
  wget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
 rpm -ivh epel-release-7-5.noarch.rpm
 
}

#*********************************************************
#  Install Perl modules
#*********************************************************
_install_perl_modules() {
 yum -y install expat-devel expat mod_ssl openssl openssl-devel perl-DBI perl-DBD-MySQL perl-Digest-MD5 perl-Digest-SHA1 perl-Time-HiRes perl-ExtUtils-Embed perl-DB_File
}

#*******************************************
#  Radius 
#*******************************************
_install_freeradius() {
  
  if [ -d /usr/local/freeradius/ ]; then
    echo "Radius exists: /usr/local/freeradius/";
    return 0 ;
  fi;
  
  PERL_LIB_DIRS="/usr/lib/ /usr/lib/i386-linux-gnu/ /usr/lib64/ /usr/lib/x86_64-linux-gnu/ /usr/lib64/perl5/CORE/ /usr/lib/perl5/5.10.0/x86_64-linux-thread-multi/CORE/ /usr/lib/perl5/CORE/"
  
for dir in ${PERL_LIB_DIRS}; do
  if [ "${DEBUG}" = 1 ]; then
    echo "ls ${dir}/libperl* | head -1"  
  fi;

  PERL_LIB=`ls ${dir}/libperl* | head -1`;
  if [ x"${PERL_LIB}" != x ]; then
    PERL_LIB_DIR=${dir}
    if [ ! -f ${PERL_LIB_DIR}/libperl.so ]; then
      ln -s ${PERL_LIB} ${PERL_LIB_DIR}libperl.so
    fi;
  fi;
done;


if [ x"${PERL_LIB_DIR}" = x ]; then
  echo "Perl lib not found";
  exit;
else
  echo "Perl lib: ${PERL_LIB_DIR}libperl.so"
fi;

FREERADIUS_VERSION="2.2.7"
RADIUS_SERVER_USER="freerad"
 
wget freeradius-server-${FREERADIUS_VERSION}.tar.gz ftp://ftp.freeradius.org/pub/freeradius/freeradius-server-${FREERADIUS_VERSION}.tar.gz

if [ ! -f freeradius-server-${FREERADIUS_VERSION}.tar.gz ]; then
  echo "Can\'t download freeradius. PLease download and install manual";
  exit;
fi;

tar zxvf freeradius-server-${FREERADIUS_VERSION}.tar.gz

cd freeradius-server-${FREERADIUS_VERSION}
./configure --prefix=/usr/local/freeradius --with-rlm-perl-lib-dir=${PERL_LIB_DIR} --without-openssl --with-dhcp > 1
echo "./configure --prefix=/usr/local/freeradius --with-rlm-perl-lib-dir=${PERL_LIB_DIR} --without-openssl --with-dhcp " > configure_abills
make && make install

ln -s /usr/local/freeradius/sbin/radiusd /usr/sbin/radiusd

#Add user
groupadd ${RADIUS_SERVER_USER}
useradd -g ${RADIUS_SERVER_USER} -s /bash/bash ${RADIUS_SERVER_USER}
chown -R ${RADIUS_SERVER_USER}:${RADIUS_SERVER_USER} /usr/local/freeradius/etc/raddb

(cat <<EOF
#!/bin/bash
#
# radiusd       This shell script takes care of starting and stopping
#               freeradius.
#
# chkconfig: - 58 74
# description: radiusd is service access provider Daemon. \

### BEGIN INIT INFO
# Provides: radiusd
# Should-Start: radiusd
# Should-Stop: radiusd
# Short-Description: start and stop radiusd
# Description: radiusd is access provider service Daemon.
### END INIT INFO

# Source function library.
. /etc/init.d/functions

prog=/usr/local/freeradius/sbin/radiusd
lockfile=/var/lock/subsys/\$prog

start() {
        # Start daemons.
        echo -n \$"Starting \$prog: "
        daemon \$prog \$OPTIONS
        RETVAL=\$?
        echo
        [ \$RETVAL -eq 0 ] && touch \$lockfile
        return \$RETVAL
}
stop() {
        [ "\$EUID" != "0" ] && exit 4
        echo -n \$"Shutting down \$prog: "
        killproc \$prog
        RETVAL=\$?
        echo
        [ \$RETVAL -eq 0 ] && rm -f \$lockfile
        return \$RETVAL
}
# See how we were called.
case "\$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status \$prog
        ;;
  restart|force-reload)
        stop
        start
        ;;
  try-restart|condrestart)
        if status \$prog > /dev/null; then
            stop
            start
        fi
        ;;
  reload)
        exit 3
        ;;
  *)
        echo \$"Usage: \$0 {start|stop|status|restart|try-restart|force-reload}"
        exit 2
esac

EOF
) > /etc/init.d/freeradius

  chmod +x /etc/init.d/freeradius
  chkconfig freeradius add
  chkconfig freeradius on

}

#*******************************************
#  Dhcp server
#*******************************************
_install_dhcp() {
  yum -y install dhcp
}

#*******************************************
#  Utils 
#*******************************************
_install_utils() {
  yum -y install vim tmux bash git
}

#*******************************************
# Flow-tools
#*******************************************
install_flowtools() {
	wget ftp://ftp.eng.oar.net/pub/flow-tools/flow-tools-0.66.tar.gz
  tar zxvf flow-tools-0.66.tar.gz
  cd flow-tools-0.66
  ./configure
  make 
  make install
}

#**********************************************************
# Ipcad
#**********************************************************
install_ipcad() {

_install libpcap-dev;
yum install libpcap libpcap-devel;
#  if [ "${OS}" = "Ubuntu" -o "${OS}" = "Debian" -o "${OS}" = "CentOS"]; then
  
  echo '********************************************************************';
  echo '***        THIS SCRIPT APPLIES SOME FIXES TO BUILD IPCAD         ***';
  echo '********************************************************************';
  
  # will be installed in /usr/
  cd /usr/
  
  #remove if already extracted
  if [ -d /usr/ipcad-3.7.3 ]; then
    rm -rf ipcad-3.7.3
  fi;
  
  # do not download if present
  if [ -f "ipcad-3.7.3.tar.gz" ]; then
    echo "INFO: Already downloaded";
  else
    wget http://lionet.info/soft/ipcad-3.7.3.tar.gz
  fi;
  
  tar -xvzf ipcad-3.7.3.tar.gz
  cd ipcad-3.7.3
  
  LINE1_NUM=`grep -n 'HAVE_LINUX_NETLINK_H' headers.h | cut -d : -f 1`
  LINE2_NUM=$(( LINE1_NUM + 2 ));
  
  sed -i "${LINE2_NUM}d" headers.h;
  sed -i "${LINE1_NUM}d" headers.h;
  
  echo
  
  if [ `cat headers.h | grep 'HAVE_LINUX_NETLINK_H'` ]; then
    echo "INFO:  Error "
  else
    echo "INFO:  HAVE_LINUX_NETLINK_H Deleted";
  fi;
  
  
  sed -i "1i #include \"signal.h\"" main.c;
  
  echo
  
  sed -i "1i #include \"headers.h\"" pps.c;
  sed -i "1i #include \"signal.h\"" pps.c;
  
  echo "INFO: Added to pps.c"
    
  sed -i "1i #include \"signal.h\"" servers.h;
  
  echo "INFO: Added to servers.h"
  
  ./configure && make && make install
  
  if [ -d  /var/ipcad/ ]; then
    echo "directory /var/ipcad/ exists";
  else
    mkdir /var/ipcad/;
  fi;
  

(cat <<EOF
# Интерфейсы для сбора статистики
interface eth0;
# детализация по портам 
#capture-ports enable;

# Агрегировать порты, уменьшает размер базы детализации 
#aggregate 1024-65535    into 65535;     /* Aggregate wildly */
#aggregate 3128-3128     into 3128;      /* Protect these ports */
#aggregate 150-1023      into 1023;      /* General low range */

# Експортирование статистики на адрес 127.0.0.1 порт 9996
netflow export destination 127.0.0.1 9996;
netflow export version 5;       # NetFlow export format version {1|5}
netflow timeout active 30;      # Timeout when flow is active, in minutes
netflow timeout inactive 15;    # Flow inactivity timeout, in seconds
netflow engine-type 73;         # v5 engine_type; 73='I' for "IPCAD"
netflow engine-id 1;            # Useful to differentiate multiple ipcads.

dumpfile = ipcad.dump;
chroot = /var/ipcad/;
pidfile = ipcad.pid;  

rsh enable at 127.0.0.1;
memory_limit = 16m;
EOF
) > /usr/local/etc/ipcad.conf

}